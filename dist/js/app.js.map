{"version":3,"sources":["index.js"],"names":["url","URLSearchParams","window","location","search","offset","nextOffset","options","threshold","fetch","then","res","json","data","maxOffset","count","parseInt","results","forEach","result","character","document","querySelector","characterList","clone","content","cloneNode","innerText","name","appendChild","callback","entries","target","intersectionRatio","isIntersecting","console","log","intObs","IntersectionObserver","observe"],"mappings":";;AAAA,IAAIA,GAAG,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAV;AAEA,IAAIC,MAAM,GAAG,CAAb;AAEA,IAAIC,UAAJ;AAEA,IAAIC,OAAO,GAAG;AACVC,EAAAA,SAAS,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX;AADD,CAAd;AAIAC,KAAK,oDAA6CJ,MAA7C,eAAL,CACKK,IADL,CACU,UAAAC,GAAG;AAAA,SAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,CADb,EAESF,IAFT,CAEc,UAASG,IAAT,EAAe;AAEjB,MAAIC,SAAS,GAAGD,IAAI,CAACE,KAAL,GAAcF,IAAI,CAACE,KAAL,GAAa,EAA3C;AAEAT,EAAAA,UAAU,GAAGD,MAAM,IAAIS,SAAV,GAAsBA,SAAtB,GAAkCE,QAAQ,CAACX,MAAD,CAAR,GAAmB,EAAlE,CAJiB,CAOjB;;AAGAQ,EAAAA,IAAI,CAACI,OAAL,CAAaC,OAAb,CAAqB,UAASC,MAAT,EAAiB;AAAC;AACvC;AAGA,QAAIC,SAAS,GAAGC,QAAQ,CAACC,aAAT,CAAuB,YAAvB,CAAhB;AACA,QAAIC,aAAa,GAAGF,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,CAApB;AAEA,QAAIE,KAAK,GAAGJ,SAAS,CAACK,OAAV,CAAkBC,SAAlB,CAA4B,IAA5B,CAAZ,CAPsC,CAOQ;;AAC9CF,IAAAA,KAAK,CAACF,aAAN,CAAoB,YAApB,EAAkCK,SAAlC,GAA8CR,MAAM,CAACS,IAArD,CARsC,CAQoB;;AAE1DL,IAAAA,aAAa,CAACM,WAAd,CAA0BL,KAA1B;AACH,GAXG;;AAaJ,WAASM,QAAT,CAAkBC,OAAlB,EAA2B;AACvB;AADuB,oBAE8BA,OAAO,CAAC,CAAD,CAFrC;AAAA,QAEjBC,MAFiB,aAEjBA,MAFiB;AAAA,QAETC,iBAFS,aAETA,iBAFS;AAAA,QAEUC,cAFV,aAEUA,cAFV;AAGvBC,IAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AAEH;;AAED,MAAIM,MAAM,GAAG,IAAIC,oBAAJ,CAAyBR,QAAzB,EAAmCvB,OAAnC,CAAb;AAGA8B,EAAAA,MAAM,CAACE,OAAP,CAAelB,QAAQ,CAACC,aAAT,CAAuB,8BAAvB,CAAf;AACH,CApCL","file":"app.js","sourcesContent":["let url = new URLSearchParams(window.location.search);\n\nlet offset = 0;\n\nlet nextOffset;\n\nvar options = {\n    threshold: [0.2, 0.5, 0.8]\n};\n\nfetch(`https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=10`)\n    .then(res => res.json())\n        .then(function(data) {\n\n            let maxOffset = data.count - (data.count % 10);\n\n            nextOffset = offset >= maxOffset ? maxOffset : parseInt(offset) + 10;\n        \n\n            //nextLink.href = `?offset=${nextOffset}`;\n            \n\n            data.results.forEach(function(result) {//data er den information, jeg har fetchet (check i konsolen), results er Array'et \n            //console.log(data);\n            \n            \n            let character = document.querySelector(\"#character\");\n            let characterList = document.querySelector(\".characterList\");\n\n            let clone = character.content.cloneNode(true);//her laver jeg en klon\n            clone.querySelector(\".character\").innerText = result.name;//her skal klonen sættes in i html'en\n            \n            characterList.appendChild(clone);\n        });\n\n        function callback(entries) {\n            //var target = entries[0].target;en anden måde at skrive det på\n            var { target, intersectionRatio, isIntersecting } =  entries[0];\n            console.log(entries);\n\n        }\n        \n        var intObs = new IntersectionObserver(callback, options);\n  \n\n        intObs.observe(document.querySelector(\".characterList li:last-child\")); \n    });"]}